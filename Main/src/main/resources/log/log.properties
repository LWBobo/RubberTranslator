############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
handlers= com.rubbertranslator.mvp.modules.log.MyFileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
com.rubbertranslator.mvp.modules.log.MyFileHandler.pattern = %h/RubberTranslator/log/rubber-translator-log%u.log
com.rubbertranslator.mvp.modules.log.MyFileHandler.limit = 30000
com.rubbertranslator.mvp.modules.log.MyFileHandler.count = 1
# Default number of locks FileHandler can obtain synchronously.
# This specifies maximum number of attempts to obtain lock file by FileHandler
# implemented by incrementing the unique field %u as per FileHandler API documentation.
com.rubbertranslator.mvp.modules.log.MyFileHandler.maxLocks = 5000
com.rubbertranslator.mvp.modules.log.MyFileHandler.formatter = java.util.logging.SimpleFormatter
# \u81EA\u5B9A\u4E49\u683C\u5F0F\u53C2\u8003\uFF1Ahttps://www.logicbig.com/tutorials/core-java-tutorial/logging/customizing-default-format.html
# String.format(format, date, source, logger, level, message, thrown);
java.util.logging.SimpleFormatter.format=[%1$tF %1$tT] [%2$s] [%4$s] %5$s %6$s %n

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level = INFO
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

# Example to customize the SimpleFormatter output format
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

# custom log level for specific class or package
#com.rubbertranslator.level=OFF